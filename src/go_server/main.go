package main

import (
	"log"
	"math"
	"net"
	"os"
	"os/signal"
	"strings"
	"sync"
	"syscall"
	"time"

	"github.com/hraban/opus"
)

const (
	sampleRate    = 48000
	channels      = 1
	frameSize     = 960  // 20ms at 48kHz
	maxPacketSize = 1275 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ Opus

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
	clientTimeout     = 30 * time.Second       // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥
	heartbeatInterval = 5 * time.Second        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
	maxBufferAge      = 500 * time.Millisecond // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –±—É—Ñ–µ—Ä–∞
)

type Client struct {
	addr         net.Addr
	username     string
	inVoice      bool
	voiceAddr    string
	decoder      *opus.Decoder
	encoder      *opus.Encoder
	lastActivity time.Time
	active       bool
}

// AudioBuffer –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ, AudioProcessor —É–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–∏–º
// type AudioBuffer struct {
// 	data      []float32
// 	timestamp time.Time
// }

var (
	clients    = make(map[string]*Client)
	clientsMux sync.RWMutex
	// audioBuffers    = make(map[string][]AudioBuffer) // –£–¥–∞–ª–µ–Ω–æ
	// audioSenders    = make(map[string]string) // –≠—Ç–æ –ø–æ–ª–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º
	// audioBuffersMux sync.RWMutex // –£–¥–∞–ª–µ–Ω–æ
	mixInterval = 20 * time.Millisecond
	// audioProcessor –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ handleVoiceData
)

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±—É—Ñ–µ—Ä–æ–≤
func mixAudio(buffers [][]float32) []float32 {
	if len(buffers) == 0 {
		return nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –±—É—Ñ–µ—Ä–æ–≤
	frameLen := len(buffers[0])
	for i, buf := range buffers {
		if len(buf) != frameLen {
			log.Printf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ %d: %d (–æ–∂–∏–¥–∞–ª–æ—Å—å %d)", i, len(buf), frameLen)
			return nil
		}
	}

	// –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π –±—É—Ñ–µ—Ä
	mixed := make([]float32, frameLen)

	// –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
	scale := float32(1.0) / float32(len(buffers))

	// –ú–∏–∫—à–∏—Ä—É–µ–º –≤—Å–µ –±—É—Ñ–µ—Ä—ã —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	for _, buf := range buffers {
		for i := range buf {
			mixed[i] += buf[i] * scale
		}
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–∏—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
	maxAmplitude := float32(0)
	for _, sample := range mixed {
		if abs := float32(math.Abs(float64(sample))); abs > maxAmplitude {
			maxAmplitude = abs
		}
	}

	// –ú—è–≥–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
	if maxAmplitude > 1.0 {
		// –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∏–≤—É—é –º—è–≥–∫–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
		for i := range mixed {
			mixed[i] = float32(math.Tanh(float64(mixed[i])))
		}
	}

	return mixed
}

// AudioProcessor –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∏
type AudioProcessor struct {
	sampleRate int
	channels   int
	frameSize  int
	buffers    map[string][]float32
	mutex      sync.RWMutex
}

func NewAudioProcessor() *AudioProcessor {
	return &AudioProcessor{
		sampleRate: sampleRate,
		channels:   channels,
		frameSize:  frameSize,
		buffers:    make(map[string][]float32),
	}
}

func (ap *AudioProcessor) AddBuffer(clientID string, buffer []float32) {
	ap.mutex.Lock()
	defer ap.mutex.Unlock()

	if len(buffer) != ap.frameSize {
		return
	}
	
	// –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –±—É—Ñ–µ—Ä –Ω–æ–≤—ã–º
	ap.buffers[clientID] = buffer
}

func (ap *AudioProcessor) RemoveClient(clientID string) {
	ap.mutex.Lock()
	defer ap.mutex.Unlock()
	delete(ap.buffers, clientID)
}

func (ap *AudioProcessor) GetMixedAudioForClient(excludeClientID string) []float32 {
	ap.mutex.RLock()
	defer ap.mutex.RUnlock()

	var buffers [][]float32
	
	for clientID, buffer := range ap.buffers {
		if clientID != excludeClientID {
			buffers = append(buffers, buffer)
		}
	}
	
	if len(buffers) > 0 {
		return mixAudio(buffers)
	}

	return nil
}

func cleanup(pc, voiceConn net.PacketConn) {
	log.Println("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")

	clientsMux.RLock()
	for _, client := range clients {
		pc.WriteTo([]byte("–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É"), client.addr)
	}
	clientsMux.RUnlock()

	if pc != nil {
		pc.Close()
	}
	if voiceConn != nil {
		voiceConn.Close()
	}
}

// New function to clean up inactive clients
func cleanupInactiveClients(ap *AudioProcessor) { // –ü–µ—Ä–µ–¥–∞–µ–º AudioProcessor
	ticker := time.NewTicker(clientTimeout / 2)
	defer ticker.Stop()

	for {
		<-ticker.C
		now := time.Now()

		clientsMux.Lock()
		for _, client := range clients {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –≤–æ–π—Å–µ
			if !client.inVoice {
				continue
			}

			timeSinceLastActivity := now.Sub(client.lastActivity)
			if timeSinceLastActivity > clientTimeout {
				log.Printf("–û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ %s –∏–∑ –≤–æ–π—Å–∞ (–Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ %.1f —Å–µ–∫—É–Ω–¥)",
					client.username, timeSinceLastActivity.Seconds())

				// –û—Ç–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç –≤–æ–π—Å–∞, –∞ –Ω–µ —É–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
				client.inVoice = false
				client.active = false

				ap.RemoveClient(client.username) // –£–¥–∞–ª—è–µ–º –∏–∑ AudioProcessor
			} else if timeSinceLastActivity > clientTimeout/2 {
				log.Printf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∫–ª–∏–µ–Ω—Ç %s –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –≤ –≤–æ–π—Å–µ %.1f —Å–µ–∫—É–Ω–¥",
					client.username, timeSinceLastActivity.Seconds())
			}
		}
		clientsMux.Unlock()
	}
}

// New function to send heartbeats
func sendHeartbeats(voiceConn net.PacketConn) {
	ticker := time.NewTicker(heartbeatInterval)
	defer ticker.Stop()

	heartbeat := []byte{0} // Single byte heartbeat packet

	for {
		<-ticker.C
		clientsMux.RLock()
		for _, client := range clients {
			if client.inVoice {
				voiceAddr, err := net.ResolveUDPAddr("udp", client.voiceAddr)
				if err == nil {
					voiceConn.WriteTo(heartbeat, voiceAddr)
				}
			}
		}
		clientsMux.RUnlock()
	}
}

func handleVoiceData(voiceConn net.PacketConn) {
	buffer := make([]byte, maxPacketSize)
	audioProcessor := NewAudioProcessor()

	log.Println("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω")
	
	// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	var packetsReceived int64
	var packetsProcessed int64
	var packetsSent int64 // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
	var lastStatsTime = time.Now()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –æ—á–∏—Å—Ç–∫–∏
	go cleanupInactiveClients(audioProcessor) // –ü–µ—Ä–µ–¥–∞–µ–º audioProcessor

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ heartbeat
	go sendHeartbeats(voiceConn)
	
	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	go func() {
		ticker := time.NewTicker(5 * time.Second)
		defer ticker.Stop()
		
		for {
			<-ticker.C
			
			clientsMux.RLock()
			voiceClientsCount := 0
			for _, client := range clients {
				if client.inVoice && client.active {
					voiceClientsCount++
				}
			}
			clientsMux.RUnlock()
			
			currentTime := time.Now()
			duration := currentTime.Sub(lastStatsTime).Seconds()
			packetsPerSec := float64(packetsReceived) / duration
			processedPerSec := float64(packetsProcessed) / duration
			sentPerSec := float64(packetsSent) / duration
			
			if voiceClientsCount > 0 {
				log.Printf("üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç: %d –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ | –ü–æ–ª—É—á–µ–Ω–æ: %.1f –ø–∞–∫/—Å–µ–∫ | –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %.1f –ø–∞–∫/—Å–µ–∫ | –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %.1f –ø–∞–∫/—Å–µ–∫", 
					voiceClientsCount, packetsPerSec, processedPerSec, sentPerSec)
			}
			
			// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
			packetsReceived = 0
			packetsProcessed = 0
			packetsSent = 0
			lastStatsTime = currentTime
		}
	}()

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –º–∏–∫—à–µ—Ä–∞ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –ø–∞–Ω–∏–∫–∏
	go func() {
		defer func() {
			if r := recover(); r != nil {
				log.Printf("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–∞–Ω–∏–∫–∏ –º–∏–∫—à–µ—Ä–∞: %v", r)
				go handleVoiceData(voiceConn) // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Ç–æ—Ç –∂–µ voiceConn
			}
		}()

		ticker := time.NewTicker(mixInterval)
		defer ticker.Stop()

		for {
			<-ticker.C

			clientsMux.RLock() // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤

			// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ
			var voiceClients []*Client
			for _, client := range clients {
				if client.inVoice && client.encoder != nil {
					voiceClients = append(voiceClients, client)
				}
			}
			clientsMux.RUnlock()

			// –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –≤–æ–π—Å–µ, –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
			if len(voiceClients) == 0 {
				audioProcessor.mutex.Lock()
				audioProcessor.buffers = make(map[string][]float32)
				audioProcessor.mutex.Unlock()
				continue
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ñ–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
			audioProcessor.mutex.RLock()
			bufferCount := len(audioProcessor.buffers)
			audioProcessor.mutex.RUnlock()
			
			// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –µ—Å–ª–∏ –Ω–µ—Ç –±—É—Ñ–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
			if bufferCount == 0 {
				continue
			}

			// –ü—Ä–æ—Ü–µ—Å—Å–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
			for _, client := range voiceClients {
				var mixed []float32
				
				// –ü–ï–†–ï–ö–†–ï–°–¢–ù–û–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï: –∫–ª–∏–µ–Ω—Ç —Å–ª—ã—à–∏—Ç –î–†–£–ì–ò–•, –Ω–µ —Å–µ–±—è
				audioProcessor.mutex.RLock()
				for clientID, clientBuffer := range audioProcessor.buffers {
					if clientID != client.username { // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
						if mixed == nil {
							mixed = make([]float32, len(clientBuffer))
							copy(mixed, clientBuffer)
						} else {
							// –ú–∏–∫—à–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
							for i := range mixed {
								mixed[i] = (mixed[i] + clientBuffer[i]) * 0.5
							}
						}
					}
				}
				audioProcessor.mutex.RUnlock()
				
				// –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏—à–∏–Ω—É
				if mixed == nil {
					mixed = make([]float32, frameSize)
				}

				// Convert to PCM
				pcm := make([]int16, len(mixed))
				for i, sample := range mixed {
					// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
					if sample > 1.0 {
						sample = 1.0
					} else if sample < -1.0 {
						sample = -1.0
					}
					pcm[i] = int16(sample * 32767.0)
				}

				// Encode with Opus
				encoded := make([]byte, maxPacketSize)
				n, err := client.encoder.Encode(pcm, encoded)
				if err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Opus –¥–ª—è %s: %v", client.username, err)
					continue
				}

				// Send to client
				if n > 0 {
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
					voiceAddr, err := net.ResolveUDPAddr("udp", client.voiceAddr)
					if err == nil {
						_, writeErr := voiceConn.WriteTo(encoded[:n], voiceAddr)
						if writeErr != nil {
							log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ %s: %v", client.username, writeErr)
						} else {
							packetsSent++
						}
					} else {
						log.Printf("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ %s: %v", client.voiceAddr, err)
					}
				} else {
					log.Printf("‚ö†Ô∏è –ö–æ–¥–∏—Ä–æ–≤—â–∏–∫ –≤–µ—Ä–Ω—É–ª 0 –±–∞–π—Ç –¥–ª—è %s", client.username)
				}
			}
		}
	}()

	// Main audio processing loop
	for {
		n, remoteAddr, err := voiceConn.ReadFrom(buffer)
		if err != nil {
			log.Printf("Error reading voice data: %v", err)
			continue
		}
		
		packetsReceived++

		// Update client activity
		clientsMux.Lock()
		var sender *Client
		for _, client := range clients {
			if client.voiceAddr == remoteAddr.String() {
				client.lastActivity = time.Now()
				client.active = true
				sender = client
				break
			}
		}

		if sender == nil {
			senderIP := strings.Split(remoteAddr.String(), ":")[0]
			for _, client := range clients {
				if client.inVoice && strings.Split(client.addr.String(), ":")[0] == senderIP {
					client.voiceAddr = remoteAddr.String()
					sender = client
					break
				}
			}
		}

		if sender == nil || !sender.inVoice || sender.decoder == nil {
			clientsMux.Unlock()
			continue
		}

		// Handle heartbeat packets (–µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ—Ä—Ç)
		if n == 1 && buffer[0] == 0 {
			clientsMux.Unlock()
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º heartbeat –ø–∞–∫–µ—Ç—ã
		}

		if n > maxPacketSize { // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–∫–µ—Ç–∞
			clientsMux.Unlock()
			continue
		}

		// Decode audio
		pcm := make([]int16, frameSize)
		
		// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
		samplesDecoded, err := sender.decoder.Decode(buffer[:n], pcm)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Opus –¥–ª—è %s: %v (—Ä–∞–∑–º–µ—Ä: %d)", 
				sender.username, err, len(buffer[:n]))
			clientsMux.Unlock()
			continue
		}
		
		if samplesDecoded != frameSize {
			log.Printf("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è %s: –ø–æ–ª—É—á–µ–Ω–æ %d, –æ–∂–∏–¥–∞–ª–æ—Å—å %d", 
				sender.username, samplesDecoded, frameSize)
			clientsMux.Unlock()
			continue
		}

		// Convert to float32
		floatPCM := make([]float32, frameSize)
		for i, sample := range pcm {
			floatPCM[i] = float32(sample) / 32767.0
		}

		// Add to audio processor
		audioProcessor.AddBuffer(sender.username, floatPCM)
		packetsProcessed++
		
		clientsMux.Unlock()
	}
}

func mainLoop(pc net.PacketConn, voiceConn net.PacketConn, audioProcessor *AudioProcessor) { // –ü–µ—Ä–µ–¥–∞–µ–º audioProcessor
	log.Println("üöÄ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
	
	for {
		buffer := make([]byte, 12*1024*1024) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä –¥–æ 12MB –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
		n, addr, err := pc.ReadFrom(buffer)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %v", err)
			continue
		}

		msg := string(buffer[:n])
		clientKey := addr.String()

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
		if strings.Contains(msg, " joined the chat") {
			username := strings.Split(msg, " joined the chat")[0]
			clientIP := strings.Split(clientKey, ":")[0]

			// –°–æ–∑–¥–∞–µ–º –∫–æ–¥–µ–∫–∏ Opus
			decoder, err := opus.NewDecoder(sampleRate, channels)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–∫–æ–¥–µ—Ä–∞ Opus: %v", err)
				continue
			}

			encoder, err := opus.NewEncoder(sampleRate, channels, opus.AppVoIP)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–Ω–∫–æ–¥–µ—Ä–∞ Opus: %v", err)
				continue
			}

			// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —ç–Ω–∫–æ–¥–µ—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
			encoder.SetBitrate(96000)     // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç –¥–æ 96 –∫–±–∏—Ç/—Å
			encoder.SetComplexity(10)     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
			encoder.SetPacketLossPerc(10) // –£–º–µ–Ω—å—à–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ—Ç–µ—Ä–∏
			encoder.SetInBandFEC(true)    // –í–∫–ª—é—á–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –æ—à–∏–±–æ–∫

			clientsMux.Lock()
			
			// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
			for _, existingClient := range clients {
				joinMessage := existingClient.username + " joined the chat"
				pc.WriteTo([]byte(joinMessage), addr)
				log.Printf("üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ: %s", username, existingClient.username)
				
				// –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ, —Ç–æ–∂–µ —É–≤–µ–¥–æ–º–ª—è–µ–º
				if existingClient.inVoice {
					voiceMessage := existingClient.username + " –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É"
					pc.WriteTo([]byte(voiceMessage), addr)
					log.Printf("üé§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ: %s", username, existingClient.username)
				}
			}
			
			// –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
			clients[clientKey] = &Client{
				addr:         addr,
				username:     username,
				inVoice:      false,
				voiceAddr:    clientIP + ":6001",
				decoder:      decoder,
				encoder:      encoder,
				lastActivity: time.Now(),
				active:       true,
			}
			
			clientsMux.Unlock()
			log.Printf("‚ú® –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: %s (%s) -> %s", username, clientIP, clientIP+":6001")

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
			clientsMux.RLock()
			for _, client := range clients {
				// –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ–º—É —Å–µ–±–µ
				if client.addr.String() != addr.String() {
					pc.WriteTo([]byte(msg), client.addr)
				}
			}
			clientsMux.RUnlock()
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
		if msg == "VOICE_CONNECT" {
			clientsMux.Lock()
			if client, ok := clients[clientKey]; ok {
				client.inVoice = true
				client.lastActivity = time.Now()
				notification := client.username + " –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É"
				log.Printf("üé§ %s (%s) –≤–æ—à—ë–ª –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç",
					client.username, strings.Split(clientKey, ":")[0])

				// –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É
				for _, c := range clients {
					pc.WriteTo([]byte(notification), c.addr)
				}
			} else {
				log.Printf("‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ: %s", clientKey)
			}
			clientsMux.Unlock()
			continue
		}

		if msg == "VOICE_DISCONNECT" {
			clientsMux.Lock()
			if client, ok := clients[clientKey]; ok {
				client.inVoice = false
				audioProcessor.RemoveClient(client.username) // –£–¥–∞–ª—è–µ–º –∏–∑ AudioProcessor
				notification := client.username + " –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞"
				log.Printf("üîá %s (%s) –≤—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞",
					client.username, strings.Split(clientKey, ":")[0])

				// –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞
				for _, c := range clients {
					pc.WriteTo([]byte(notification), c.addr)
				}
			}
			clientsMux.Unlock()
			continue
		}

		// –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
		log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s", clientKey, msg)
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
		if strings.Contains(msg, "]: IMAGE_DATA:") {
			log.Printf("üì∑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç %s, —Ä–∞–∑–º–µ—Ä: %d –±–∞–π—Ç", clientKey, len(msg))
		}
		
		clientsMux.RLock()
		for _, client := range clients {
			pc.WriteTo([]byte(msg), client.addr)
		}
		clientsMux.RUnlock()
	}
}

func main() {
	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	pc, err := net.ListenPacket("udp", ":6000")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
	defer pc.Close()

	voiceConn, err := net.ListenPacket("udp", ":6001")
	if err != nil {
		pc.Close()
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:", err)
	}

	// –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
	defer cleanup(pc, voiceConn)

	log.Println("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É :6000")
	log.Println("–ì–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É :6001")

	audioProcessor := NewAudioProcessor() // –°–æ–∑–¥–∞–µ–º AudioProcessor –∑–¥–µ—Å—å

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go handleVoiceData(voiceConn) // AudioProcessor –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤–Ω—É—Ç—Ä–∏ handleVoiceData

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	go func() {
		<-sigChan
		cleanup(pc, voiceConn)
		os.Exit(0)
	}()

	mainLoop(pc, voiceConn, audioProcessor) // –ü–µ—Ä–µ–¥–∞–µ–º audioProcessor –≤ mainLoop
}

