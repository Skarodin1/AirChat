const { app, BrowserWindow, ipcMain } = require("electron");
const path = require("path");
const os = require("os");
const { spawn } = require("child_process");
const bcrypt = require("bcrypt");
const sqlite3 = require("sqlite3").verbose();
const crypto = require("crypto");

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

let mainWindow;
let goClientProcess = null; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ Go –∫–ª–∏–µ–Ω—Ç–∞
let goServerProcess = null; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ Go —Å–µ—Ä–≤–µ—Ä–∞
let db = null; // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function initDatabase() {
  const dbPath = path.join(app.getPath("userData"), "airchat.db");
  db = new sqlite3.Database(dbPath);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –µ—ë —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  db.get(
    "SELECT sql FROM sqlite_master WHERE type='table' AND name='users'",
    (err, row) => {
      if (err) {
        console.error("Error checking table structure:", err);
        return;
      }

      // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ - —É–¥–∞–ª—è–µ–º –µ—ë
      if (row && !row.sql.includes("email TEXT")) {
        db.run("DROP TABLE IF EXISTS users", (err) => {
          if (err) {
            console.error("Error dropping users table:", err);
            return;
          }
          createUsersTable();
        });
      } else if (!row) {
        // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞—ë–º –µ—ë
        createUsersTable();
      }
    }
  );

  console.log("Database initialized at:", dbPath);
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users
function createUsersTable() {
  db.run(
    `
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      username TEXT UNIQUE NOT NULL,
      email TEXT UNIQUE NOT NULL,
      password_hash TEXT NOT NULL,
      salt TEXT NOT NULL,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      last_login DATETIME
    )
  `,
    (err) => {
      if (err) {
        console.error("Error creating users table:", err);
      } else {
        console.log("Users table created successfully");
      }
    }
  );
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–ª–∏ –¥–ª—è –ø–∞—Ä–æ–ª—è
function generateSalt() {
  return crypto.randomBytes(32).toString("hex");
}

// –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
async function hashPassword(password, salt) {
  return await bcrypt.hash(password + salt, 12);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
async function verifyPassword(password, salt, hash) {
  return await bcrypt.compare(password + salt, hash);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏
function generateSessionToken() {
  return crypto.randomBytes(64).toString("hex");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ —Ä–µ—Å—É—Ä—Å–∞–º
function getResourcePath(relativePath) {
  let finalPath;
  if (app.isPackaged) {
    // –í —Å–æ–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ resources/bin
    finalPath = path.join(
      process.resourcesPath,
      "bin",
      path.basename(relativePath)
    );
  } else {
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø—É—Ç—å
    finalPath = path.join(__dirname, "..", relativePath);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  console.log(`[DEBUG] Resource path resolution:`);
  console.log(`  - Relative path: ${relativePath}`);
  console.log(`  - Is packaged: ${app.isPackaged}`);
  console.log(`  - Resource path: ${process.resourcesPath}`);
  console.log(`  - Final path: ${finalPath}`);
  console.log(`  - File exists: ${require("fs").existsSync(finalPath)}`);

  if (!require("fs").existsSync(finalPath)) {
    console.error(`[ERROR] Resource file not found: ${finalPath}`);
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    const alternativePaths = [
      path.join(process.resourcesPath, relativePath),
      path.join(app.getAppPath(), relativePath),
      path.join(app.getAppPath(), "bin", path.basename(relativePath)),
    ];

    console.log("[DEBUG] Checking alternative paths:");
    alternativePaths.forEach((altPath) => {
      console.log(`  - ${altPath}: ${require("fs").existsSync(altPath)}`);
    });
  }

  return finalPath;
}

const createWindow = () => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    },
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –º–µ–¥–∏–∞
  mainWindow.webContents.session.setPermissionRequestHandler(
    (webContents, permission, callback) => {
      if (permission === "media") {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∏ –∫–∞–º–µ—Ä–µ
        callback(true);
      } else {
        callback(false);
      }
    }
  );

  // and load the registration page first
  mainWindow.loadFile(path.join(__dirname, "register.html"));

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  initDatabase();
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
ipcMain.on("create-room", (event, data) => {
  console.log("Creating room:", data);

  // –ó–∞–ø—É—Å–∫–∞–µ–º Go —Å–µ—Ä–≤–µ—Ä
  const serverPath = getResourcePath("bin/server.exe");
  goServerProcess = spawn(serverPath, [], {
    detached: true,
    stdio: "pipe",
  });

  goServerProcess.stdout.on("data", (data) => {
    console.log(`[SERVER] ${data.toString()}`);
  });

  goServerProcess.stderr.on("data", (data) => {
    console.error(`[SERVER ERROR] ${data.toString()}`);
  });

  goServerProcess.on("error", (err) => {
    console.error(`Failed to start Go server: ${err}`);
    goServerProcess = null;
  });

  goServerProcess.on("close", (code) => {
    console.log(`Go server process exited with code ${code}`);
    goServerProcess = null;
  });

  // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
  setTimeout(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω —É–∂–µ
    if (goClientProcess) {
      console.log("Go client already running.");
      mainWindow.loadFile(path.join(__dirname, "index.html"));
      return;
    }

    const clientPath = getResourcePath("bin/client.exe");

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    const env = { ...process.env, SERVER_IP: data.ip, USERNAME: data.name };

    console.log(`üîß [DEBUG] –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`);
    console.log(`   SERVER_IP: ${data.ip}`);
    console.log(`   USERNAME: ${data.name}`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º Go –∫–ª–∏–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º spawn
    goClientProcess = spawn(clientPath, [], { env: env });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ Go –∫–ª–∏–µ–Ω—Ç–∞
    goClientProcess.stdout.on("data", (data) => {
      console.log("[DEBUG] Go client stdout (raw):", data);
      console.log("[DEBUG] Go client stdout (string):", data.toString());
      console.log("[DEBUG] Go client stdout (length):", data.length);
      console.log("[DEBUG] Go client stdout (hex):", data.toString("hex"));

      const message = data.toString().trim(); // –î–æ–±–∞–≤–∏–º trim –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
      console.log("[DEBUG] Message after trim:", `"${message}"`);

      // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (message.includes("[DEBUG]")) {
        console.log("üîß [CLIENT DEBUG]:", message);
        return; // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ UI
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
      if (message.length === 0) {
        console.log("[DEBUG] Empty message, skipping");
        return;
      }

      console.log("[DEBUG] Sending message to renderer:", `"${message}"`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–Ω–¥–µ—Ä–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å
      if (mainWindow) {
        mainWindow.webContents.send("display-chat-message", message);
      }
    });

    goClientProcess.stderr.on("data", (data) => {
      console.error(`Go client stderr: ${data}`);
    });

    goClientProcess.on("error", (err) => {
      console.error(`Failed to start Go client process: ${err}`);
      goClientProcess = null;
    });

    goClientProcess.on("close", (code) => {
      console.log(`Go client process exited with code ${code}`);
      goClientProcess = null;
    });

    // –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–∞
    mainWindow.loadFile(path.join(__dirname, "index.html"));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–Ω–¥–µ—Ä–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å
    setTimeout(() => {
      if (mainWindow) {
        mainWindow.webContents.send("set-username", data.name);
      }
    }, 1000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
  }, 2000); // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∑–∞–ø—É—Å–∫
});

// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 'join-room' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Go –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ spawn
ipcMain.on("join-room", (event, data) => {
  console.log("Joining room:", data);

  // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π IP –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const interfaces = os.networkInterfaces();
  let localIP = "127.0.0.1";
  for (const name of Object.keys(interfaces)) {
    for (const iface of interfaces[name]) {
      if (!iface.internal && iface.family === "IPv4") {
        localIP = iface.address;
        break;
      }
    }
    if (localIP !== "127.0.0.1") break;
  }

  // –ï—Å–ª–∏ IP —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ª–æ–∫–∞–ª—å–Ω—ã–º, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  const isLocalServer =
    data.ip === localIP || data.ip === "localhost" || data.ip === "127.0.0.1";

  if (isLocalServer && !goServerProcess) {
    console.log("–ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");

    // –ó–∞–ø—É—Å–∫–∞–µ–º Go —Å–µ—Ä–≤–µ—Ä
    const serverPath = getResourcePath("bin/server.exe");
    goServerProcess = spawn(serverPath, [], {
      detached: true,
      stdio: "pipe",
    });

    goServerProcess.stdout.on("data", (data) => {
      console.log(`[SERVER] ${data.toString()}`);
    });

    goServerProcess.stderr.on("data", (data) => {
      console.error(`[SERVER ERROR] ${data.toString()}`);
    });

    goServerProcess.on("error", (err) => {
      console.error(`Failed to start Go server: ${err}`);
      goServerProcess = null;
    });

    goServerProcess.on("close", (code) => {
      console.log(`Go server process exited with code ${code}`);
      goServerProcess = null;
    });

    // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    setTimeout(() => startClient(), 2000);
  } else {
    // –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    startClient();
  }

  function startClient() {
    if (goClientProcess) {
      console.log("Go client already running.");
      mainWindow.loadFile(path.join(__dirname, "index.html"));
      return;
    }

    const clientPath = getResourcePath("bin/client.exe");
    console.log("[DEBUG] Starting Go client from path:", clientPath);

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost
    let connectIP = data.ip;
    if (isLocalServer) {
      connectIP = "127.0.0.1";
      console.log(
        `üîß [DEBUG] –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: –∑–∞–º–µ–Ω—è–µ–º ${data.ip} –Ω–∞ ${connectIP}`
      );
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    const env = { ...process.env, SERVER_IP: connectIP, USERNAME: data.name };

    console.log(`üîß [DEBUG] –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`);
    console.log(`   SERVER_IP: ${connectIP}`);
    console.log(`   USERNAME: ${data.name}`);
    console.log(`   Working Directory: ${process.cwd()}`);
    console.log(`   Is Packaged: ${app.isPackaged}`);
    console.log(`   Resource Path: ${process.resourcesPath}`);

    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º Go –∫–ª–∏–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º spawn
      goClientProcess = spawn(clientPath, [], {
        env: env,
        stdio: ["pipe", "pipe", "pipe"],
        windowsHide: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      });

      console.log(
        "[DEBUG] Go client process started with PID:",
        goClientProcess.pid
      );
    } catch (error) {
      console.error("[ERROR] Failed to start Go client:", error);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ Go –∫–ª–∏–µ–Ω—Ç–∞
    goClientProcess.stdout.on("data", (data) => {
      console.log("[DEBUG] Go client stdout (raw):", data);
      console.log("[DEBUG] Go client stdout (string):", data.toString());
      console.log("[DEBUG] Go client stdout (length):", data.length);
      console.log("[DEBUG] Go client stdout (hex):", data.toString("hex"));

      const message = data.toString().trim(); // –î–æ–±–∞–≤–∏–º trim –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
      console.log("[DEBUG] Message after trim:", `"${message}"`);

      // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (message.includes("[DEBUG]")) {
        console.log("üîß [CLIENT DEBUG]:", message);
        return; // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ UI
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
      if (message.length === 0) {
        console.log("[DEBUG] Empty message, skipping");
        return;
      }

      console.log("[DEBUG] Sending message to renderer:", `"${message}"`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–Ω–¥–µ—Ä–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å
      if (mainWindow) {
        mainWindow.webContents.send("display-chat-message", message);
      }
    });

    goClientProcess.stderr.on("data", (data) => {
      console.error(`Go client stderr: ${data}`);
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Go –∫–ª–∏–µ–Ω—Ç–∞
    });

    goClientProcess.on("error", (err) => {
      console.error(`Failed to start Go client process: ${err}`);
      goClientProcess = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—É—Å–∫–∞
    });

    goClientProcess.on("close", (code) => {
      console.log(`Go client process exited with code ${code}`);
      goClientProcess = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
      // –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    });

    // –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–∞
    mainWindow.loadFile(path.join(__dirname, "index.html"));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–Ω–¥–µ—Ä–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å
    setTimeout(() => {
      if (mainWindow) {
        mainWindow.webContents.send("set-username", data.name);
      }
    }, 1000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –∏–∑ —Ä–µ–Ω–¥–µ—Ä–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å–∞
ipcMain.on("send-chat-message", (event, message) => {
  console.log("Received chat message from renderer:", message);
  if (goClientProcess) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥ Go –∫–ª–∏–µ–Ω—Ç–∞
    goClientProcess.stdin.write(message + "\n");
  } else {
    console.error("Go client process not running.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
ipcMain.on("send-image-message", (event, imageData) => {
  console.log("Received image message from renderer, size:", imageData.length);

  if (!goClientProcess) {
    console.error("Go client process not running.");
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ renderer
    event.reply("image-send-error", "Go client not running");
    return;
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    if (imageData.length > 10 * 1024 * 1024) {
      // 10MB –ª–∏–º–∏—Ç
      console.error("Image too large:", imageData.length);
      event.reply("image-send-error", "Image too large");
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const imageMessage = `IMAGE_DATA:${imageData}`;

    console.log(
      "[DEBUG] Attempting to send image to Go client, message length:",
      imageMessage.length
    );

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º write —Å callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
    const written = goClientProcess.stdin.write(imageMessage + "\n", (err) => {
      if (err) {
        console.error("Error writing image to Go client:", err);
        event.reply("image-send-error", err.message);
      } else {
        console.log("[DEBUG] Image sent to Go client successfully");
        event.reply("image-send-success", "Image sent successfully");
      }
    });

    if (!written) {
      console.warn("[WARNING] Write buffer is full, but continuing...");
    }
  } catch (error) {
    console.error("Error processing image:", error);
    event.reply("image-send-error", error.message);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞ (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
ipcMain.on("voice-command", (event, command) => {
  console.log("Received voice command from renderer:", command);
  if (goClientProcess) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥ Go –∫–ª–∏–µ–Ω—Ç–∞
    goClientProcess.stdin.write(command + "\n");
    console.log("Sent voice command to Go client stdin.");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (command === "/voice") {
      mainWindow.webContents.send("voice-state-changed", true);
    } else if (command === "/leave") {
      mainWindow.webContents.send("voice-state-changed", false);
    }
  } else {
    console.error("Go client process not running.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã—Ö–æ–¥
ipcMain.on("request-logout", (event) => {
  console.log("Received logout request."); // –õ–æ–≥ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞

  // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º Go –∫–ª–∏–µ–Ω—Ç
  if (goClientProcess) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—ã—Ö–æ–¥–∞
    goClientProcess.stdin.write("/exit\n");

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
    setTimeout(() => {
      if (goClientProcess) {
        goClientProcess.kill("SIGTERM");
        goClientProcess = null;
      }
    }, 1000);
  }

  // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º Go —Å–µ—Ä–≤–µ—Ä
  if (goServerProcess) {
    goServerProcess.kill("SIGTERM");
    goServerProcess = null;
  }

  if (mainWindow) {
    mainWindow.loadFile(path.join(__dirname, "register.html"));
    console.log("Loading registration page."); // –õ–æ–≥ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.on("before-quit", () => {
  if (goClientProcess) {
    goClientProcess.stdin.write("/exit\n");
    goClientProcess.kill("SIGTERM");
    goClientProcess = null;
  }

  if (goServerProcess) {
    goServerProcess.kill("SIGTERM");
    goServerProcess = null;
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP –æ—Ç —Ä–µ–Ω–¥–µ—Ä–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å–∞
ipcMain.on("get-local-ip", (event) => {
  const interfaces = os.networkInterfaces();
  let localIP = "127.0.0.1"; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  for (const name of Object.keys(interfaces)) {
    for (const iface of interfaces[name]) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ —Ç–µ, —á—Ç–æ –Ω–µ IPv4
      if (!iface.internal && iface.family === "IPv4") {
        localIP = iface.address;
        break;
      }
    }
    if (localIP !== "127.0.0.1") break; // –ù–∞–π–¥–µ–Ω –≤–Ω–µ—à–Ω–∏–π IPv4, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
  }

  console.log("Sending local IP:", localIP); // –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ IP
  event.reply("local-ip-response", localIP);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
ipcMain.on("auth-register", async (event, userData) => {
  try {
    const { username, email, password } = userData;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    db.get(
      "SELECT id FROM users WHERE username = ? OR email = ?",
      [username, email],
      async (err, row) => {
        if (err) {
          console.error("Database error:", err);
          event.reply("auth-register-response", {
            success: false,
            error: "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
          });
          return;
        }

        if (row) {
          event.reply("auth-register-response", {
            success: false,
            error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            field: "username",
          });
          return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const salt = generateSalt();
        const passwordHash = await hashPassword(password, salt);

        db.run(
          "INSERT INTO users (username, email, password_hash, salt) VALUES (?, ?, ?, ?)",
          [username, email, passwordHash, salt],
          function (err) {
            if (err) {
              console.error("Error creating user:", err);
              event.reply("auth-register-response", {
                success: false,
                error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
              });
            } else {
              console.log("User registered successfully:", username);
              event.reply("auth-register-response", {
                success: true,
                username: username,
              });
            }
          }
        );
      }
    );
  } catch (error) {
    console.error("Registration error:", error);
    event.reply("auth-register-response", {
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
ipcMain.on("auth-login", async (event, loginData) => {
  try {
    const { username, password, serverIP } = loginData;

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.get(
      "SELECT * FROM users WHERE username = ?",
      [username],
      async (err, user) => {
        if (err) {
          console.error("Database error:", err);
          event.reply("auth-login-response", {
            success: false,
            error: "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
          });
          return;
        }

        if (!user) {
          event.reply("auth-login-response", {
            success: false,
            error: "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
          });
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const isValidPassword = await verifyPassword(
          password,
          user.salt,
          user.password_hash
        );

        if (!isValidPassword) {
          event.reply("auth-login-response", {
            success: false,
            error: "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
          });
          return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        db.run("UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = ?", [
          user.id,
        ]);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
        const sessionToken = generateSessionToken();

        console.log("User logged in successfully:", username);
        event.reply("auth-login-response", {
          success: true,
          username: username,
          serverIP: serverIP,
          token: sessionToken,
        });
      }
    );
  } catch (error) {
    console.error("Login error:", error);
    event.reply("auth-login-response", {
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
});
